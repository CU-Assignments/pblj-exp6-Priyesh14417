import java.util.ArrayList;
import java.util.Comparator;
import java.util.DoubleSummaryStatistics;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

class Product {
    String name;
    String category;
    double price;

    Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    @Override
    public String toString() {
        return "Product{name='" + name + "', category='" + category + "', price=" + price + '}';
    }
}

public class Main {
    public static void main(String[] args) {
        List<Product> products = new ArrayList<>();
        products.add(new Product("Laptop", "Electronics", 999.99));
        products.add(new Product("Smartphone", "Electronics", 699.99));
        products.add(new Product("Coffee Maker", "Home Appliances", 79.99));
        products.add(new Product("Blender", "Home Appliances", 49.99));
        products.add(new Product("Smart TV", "Electronics", 1199.99));
        products.add(new Product("Vacuum Cleaner", "Home Appliances", 129.99));
        products.add(new Product("Headphones", "Electronics", 199.99));
        products.add(new Product("Microwave", "Home Appliances", 99.99));

        // Group products by category
        Map<String, List<Product>> productsByCategory = products.stream()
                .collect(Collectors.groupingBy(product -> product.category));

        // Find the most expensive product in each category
        Map<String, Optional<Product>> mostExpensiveProductByCategory = products.stream()
                .collect(Collectors.groupingBy(
                        product -> product.category,
                        Collectors.maxBy(Comparator.comparingDouble(product -> product.price))
                ));

        // Calculate the average price of all products
        DoubleSummaryStatistics statistics = products.stream()
                .collect(Collectors.summarizingDouble(product -> product.price));
        double averagePrice = statistics.getAverage();

        // Print the results
        System.out.println("Products grouped by category:");
        productsByCategory.forEach((category, productList) -> {
            System.out.println(category + ": " + productList);
        });

        System.out.println("\nMost expensive product in each category:");
        mostExpensiveProductByCategory.forEach((category, product) -> {
            product.ifPresent(p -> System.out.println(category + ": " + p));
        });

        System.out.println("\nAverage price of all products: $" + averagePrice);
    }
}
